## extracting based on two conditions
test<-selected_variables%>%
filter(state==c("California","New York"))
View(test)
## filter can be used to apply numerical condition
selected_variables%>%
filter(population>100000)
## filter can be used to apply numerical condition
selected_variables%>%
filter(state=="California")%>%
filter(population>100000)
## filter can be used to apply numerical condition
selected_variables%>%
filter(state=="California")%>%
filter(population>1000000)
## using multiple verbs to gether
selected_variables%>%
arrange(population)%>%
filter(population>100000,state=="New York")
## using multiple verbs to gether
selected_variables%>%
arrange(population)%>%
filter(population>1000000,state=="New York")
## first we will learn select verb
## with this verb you can select columns you need in the dataset
selected_variables<-counties%>%
select(state,county,region,population,unemployment)
## mutate verb to add new variable or change existing variable
## adding a new variable
selected_variables%>%
mutate(unemployment_pop=population*unemployment/100)
## data manipulation with dplyr
## four basic verbs of data manipulation
## select,filter,arrange,mutate
library(dplyr)
## if you want to select colomuns in sequence
counties%>%
select(state:unemployment)
## if you want to select colomuns in sequence
counties%>%
select(state:women)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
## data manipulation with dplyr
## four basic verbs of data manipulation
## select,filter,arrange,mutate
library(dplyr)
## data manipulation with dplyr
## four basic verbs of data manipulation
## select,filter,arrange,mutate
library(dplyr)
install.packages("dplyr")
## data manipulation with dplyr
## four basic verbs of data manipulation
## select,filter,arrange,mutate
library(dplyr)
### Now we will learn how to aggregate data
## first count verb
count(selected_variables)
selected_variables%>%
count(county)
selected_variables%>%
count(state)
## counting and sorting count often comes with sort
## which will sort the data in descending order
selected_variables%>%
count(state,sort=T)
## count according to population of a state
selected_variables%>%
count(state,count=TRUE,wt=population)
## count according to population of a state
selected_variables%>%
count(state,sort=TRUE,wt=population)
##The summarize() verb is very useful for collapsing a large dataset into a single observation.
selected_variables%>%
summarise(sum(population))
selected_variables%>%
summarise(sum(population),mean(unemployment))
## group_by  is very useful verb
## it is often used with summarize
## suppose i want to get the population of every state
selected_variables%>%
group_by(state)%>%
summarise(sum(population))
## group_by  is very useful verb
## it is often used with summarize
## suppose i want to get the population of every state
selected_variables%>%
group_by(state)%>%
summarise(sum(population))%>%
ungroup()
## lets work with covid data
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(sum(cases))
## lets work with covid data
covid_data<-COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(sum(cases))
View(covid_data)
counties_selected <- counties %>%
select(region, state, county, population)
counties_selected%>%
group_by(state,region)%>%
summarise(sum(population))
## top_n verb is often used to select exterme observations
## suppose i want to select county with maximum population in each state
## I can do this with following example
selected_variables%>%
group_by(state)%>%
top_n(population,n=1)
## top_n verb is often used to select exterme observations
## suppose i want to select county with maximum population in each state
## I can do this with following example
selected_variables%>%
group_by(state)%>%
top_n(population,n=1)%>%
arrange(desc())
## top_n verb is often used to select exterme observations
## suppose i want to select county with maximum population in each state
## I can do this with following example
selected_variables%>%
group_by(state)%>%
top_n(population,n=1)%>%
arrange()
## suppose in covid dataset i want to know day with maximum cases in single day
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
top_n(cases,1)
## suppose in covid dataset i want to know day with maximum cases in single day
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
top_n(cases,n=1)
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=1)
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=10)
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=5)
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=5,wt=totaldeaths)
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
arrange( top_n(totaldeaths,n=5))
arrange( desc(top_n(totaldeaths,n=5))
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
arrange(desc(top_n(totaldeaths,n=5))
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
arrange(desc(top_n(totaldeaths,n=5)))
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
arrange(desc(top_n(totaldeaths,n=5)))
## top 10 countries with maximum number of deaths
COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=10)
## top 10 countries with maximum number of deaths
top_10<-COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=10)
top_10%>%
arrange(desc(totaldeaths))
## top 10 countries with maximum number of deaths
top_10<-COVID_19_geographic_disbtribution_worldwide%>%
group_by(countriesAndTerritories)%>%
summarise(totaldeaths=sum(deaths))%>%
top_n(totaldeaths,n=10)%>%
arrange(desc(totaldeaths))
top_10
## more selecting options
## selected counties that contains "work" character in their name
counties%>%
select(state,county,contains("work"))
## selected counties that start with income
counties%>%
select(state,county,starts_with("income"))
## similiarly you can also use end_with verb
## removing a variable from dataset use -
counties%>%
select(~population)
## similiarly you can also use end_with verb
## removing a variable from dataset use -
counties%>%
select(-population)
## to summarise few selecte columns
selected_variables%>%
summarise_at(men,women)
## to summarise few selecte columns
selected_variables%>%
summarise_at(population,women)
View(selected_variables)
## to summarise few selecte columns
selected_variables%>%
summarise_at(population,unemployment)
## data manipulation with dplyr
## four basic verbs of data manipulation
## select,filter,arrange,mutate
library(dplyr)
## extracting selected rows
counties%>%
slice(1:25)
## removing and adding a variable simultanously
counties%>%
transmute(unemploy_ab==population*unemployment/100)
## removing and adding a variable simultanously
counties%>%
transmute(unemploy_ab=population*unemployment/100)
## removing and adding a variable simultanously
counties%>%
transmute(unemployment,unemploy_ab=population*unemployment/100)
## removing and adding a variable simultanously
counties%>%
transmute(counties,unemploy_ab=population*unemployment/100)
## selecting and adding new columns simulatnously
## transmtate can solve your problem
counties%>%
transmute(state,county,unemploy_ab=population*unemployment/100)
## renaming a column
counties%>%
rename(state==province)
## renaming a column
counties%>%
rename(state=province)
## renaming a column
counties%>%
rename(state="province")
## renaming a column
counties%>%
rename(province=state)
bike_share_rides_ch1_1 <- readRDS("~/timeseries_plot/bike_share_rides_ch1_1.rds")
## common data types are
## Numeric
## Character (text,string)
## Date
## Factor
## converting data types
## working with bike share data
glimpse(bike_share_rides_ch1_1)
library(dplyr)
## common data types are
## Numeric
## Character (text,string)
## Date
## Factor
## converting data types
## working with bike share data
glimpse(bike_share_rides_ch1_1)
library(assertive)
library(leaflet)
library(dplyr)
library(tidyr)
## leaflet
## for Spatial data
## creating  simple world map
leaflet()%>%
addTiles()
## if you donot want to use deafaut style use add provider tiles
leaflet()%>%
addProviderTiles("CartoDB")
leaflet()%>%
addProviderTiles("Stamen")
leaflet()%>%
addProviderTiles("Esri")
leaflet()%>%
addProviderTiles("CartoDB.PositronNoLabels" )
leaflet()%>%
addProviderTiles("Esri")
library(readxl)
jinesh_location_1_ <- read_excel("jinesh location (1).xlsx")
View(jinesh_location_1_)
leaflet() %>%
addProviderTiles("Esri") %>%
addMarkers(lng = jinesh_location_1_$Longitude, lat = jinesh_location_1_$Latitude)
## mapping colleges in florida
Florida_map<-leaflet()%>%
addProviderTiles("CartoDB")%>%
addMarkers(data=jinesh_location_1_)
Florida_map
## mapping colleges in florida
Florida_map<-leaflet()%>%
addProviderTiles("Esri")%>%
addMarkers(data=jinesh_location_1_)
Florida_map
## we can also add circle markers
Florida_map%>%
addCircleMarkers(data=Florida)
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 3)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 3,color = "red")
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red")
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 1,color = "red")
Florida_map_circle
## We can also set color
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=Florida,radius = 2,popup = Florida$INSTNM,color = "red",opacity = 0.8)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 1,color = "red",opacity = 0.60)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 1,color = "red",opacity = 0.80)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 1.5,color = "red",opacity = 0.80)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red",opacity = 0.80)
Florida_map_circle
## We can also set color
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=Florida,radius = 2,popup = Florida$INSTNM,color = "red",opacity = 0.9)
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red",opacity = 0.90)
Florida_map_circle
Florida_map_circle%>%
addTiles("OpenStreetMap")
library(readxl)
gagan_loc <- read_excel("gagan_loc.xlsx")
View(gagan_loc)
library(leaflet)
library(dplyr)
library(tidyr)
## mapping colleges in florida
Florida_map<-leaflet()%>%
addProviderTiles("Esri")%>%
addMarkers(data=gagan_loc)
Florida_map
## we can also add circle markers
Florida_map%>%
addCircleMarkers(data=Florida)
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red",opacity = 0.90)
## adding info of everycollege
## with the help of pop up
Florida_map_circle
## We can also set color
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=Florida,radius = 2,popup = Florida$INSTNM,color = "red",opacity = 0.9)
Florida_map_circle
## mapping colleges in florida
Florida_map<-leaflet()%>%
addProviderTiles("Esri")%>%
addMarkers(data=gagan_loc)
Florida_map
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red",opacity = 0.90)
Florida_map_circle%>%
addTiles("OpenStreetMap")
## adding info of everycollege
## with the help of pop up
Florida_map_circle
## removing markers and adding circle markers
Florida_map_circle<-Florida_map%>%
clearMarkers()%>%
addCircleMarkers(data=jinesh_location_1_,radius = 2,color = "red",opacity = 0.70)
## adding info of everycollege
## with the help of pop up
Florida_map_circle
bibliometrix::biblioshiny()
bibliometrix::biblioshiny()
bibliometrix::biblioshiny()
bibliometrix::biblioshiny()
bibliometrix::biblioshiny()
bibliometrix::biblioshiny()
library(tidyr)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
jin_uni <- read_excel("jin_uni.xlsx")
View(jin_uni)
map1<-leaflet() %>%
addProviderTiles("Esri") %>%
addMarkers(lng = jin_uni$Longitude, lat = jin_uni$Latitude)
library(leaflet)
library(dplyr)
library(tidyr)
map1<-leaflet() %>%
addProviderTiles("Esri") %>%
addMarkers(lng = jin_uni$Longitude, lat = jin_uni$Latitude)
map_circle<-map1%>%
clearMarkers()%>%
addCircleMarkers(data=jin_uni,radius = jin_uni$Articles,color = "red",opacity = 0.70)
Florida_map_circle%>%
addTiles("OpenStreetMap")
map_circle
map_circle<-map1%>%
clearMarkers()%>%
addCircleMarkers(data=jin_uni,radius = jin_uni$Articles,color = "red")
map_circle
map_circle<-map1%>%
clearMarkers()%>%
addCircleMarkers(data=jin_uni,radius = jin_uni$Articles,color = "red",opacity = 1)
map_circle
dput(head(jin_uni) )
map_circle<-map1%>%
clearMarkers()%>%
addCircleMarkers(data=jin_uni,radius =2* jin_uni$Articles,color = "red",opacity = 1)
map_circle
map_circle%>%
addTiles("OpenStreetMap")
map_circle
library(leaflet)
library(dplyr)
library(tidyr)
library(readxl)
jin <- read_excel("jin.xlsx")
View(jin)
## jinesh_map
new_map<-jin%>%
addProviderTiles("Esri.WorldStreetMap")
## jinesh_map
new_map<- addProviderTiles("CartoDB")
## jinesh_map
new_map<-addProviderTiles("CartoDB")
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("CartoDB")
new_map
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("Esri.WorldStreetMap")
new_map
addCircleMarkers(clusterOptions = markerClusterOptions())
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("Esri.WorldStreetMap")%>%
addCircleMarkers(clusterOptions = markerClusterOptions())
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("Esri.WorldStreetMap")%>%
addCircleMarkers(data=jin,clusterOptions = markerClusterOptions())
new_map
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles()%>%
addCircleMarkers(data=jin,clusterOptions = markerClusterOptions())
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("OpenStreetMap")%>%
addCircleMarkers(data=jin,clusterOptions = markerClusterOptions())
new_map
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("GoogleStreetMap")%>%
addCircleMarkers(data=jin,clusterOptions = markerClusterOptions())
new_map
## jinesh_map
new_map<-leaflet()%>%
addProviderTiles("Esri")%>%
addCircleMarkers(data=jin,clusterOptions = markerClusterOptions())
new_map
